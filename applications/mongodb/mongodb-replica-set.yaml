---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: mongodb
---
# MongoDB Secrets
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secrets
  namespace: mongodb
type: Opaque
data:
  # Root user credentials (generated securely)
  mongodb-root-username: cm9vdA==  # root
  mongodb-root-password: U0F3aE9QN1V3UGd2ZTVuQ3JmZW91ZkxDRXFEV2ZvOEYvRmY5QkJCUmNRRT0=  # SAwhOP7UwPgve5nCrfeoufLCEqDWfo8F/Ff9BBBRcQE=
  
  # Application user credentials
  mongodb-app-username: bmFycmF0aXZlX3VzZXI=  # narrative_user
  mongodb-app-password: MHFKWEJja1M2aHVaV0p0VGdCRUVIZDBkYy91RTlSQmtiSDdzUngxMXZwZz0=  # 0qJXBckS6huZWJtTgBEEHd0dc/uE9RBkbH7sRx11vpg=
  
  # Replica set key for internal authentication (simple valid key)
  mongodb-replica-set-key: ZGVLWVUraHNROFFFaVNNYlJtYTFWQVdRU1BNeHBzcnFUSWk2c2phNlA2MA==
---
# MongoDB PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data-pvc
  namespace: mongodb
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: microk8s-hostpath
  resources:
    requests:
      storage: 50Gi
---
# MongoDB StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: mongodb
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secrets
              key: mongodb-root-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secrets
              key: mongodb-root-password
        - name: MONGO_INITDB_DATABASE
          value: narrative_world_system
        command:
        - mongod
        - --replSet
        - rs0
        - --bind_ip_all
        - --keyFile
        - /etc/mongodb-keyfile/mongodb-replica-set-key
        - --dbpath
        - /data/db
        - --wiredTigerCacheSizeGB
        - "2"
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                # Wait for MongoDB to start
                sleep 15
                
                # Initialize single-node replica set
                mongosh --quiet --eval "
                  try {
                    var status = rs.status();
                    print('Replica set already initialized');
                  } catch (e) {
                    if (e.codeName === 'NotYetInitialized') {
                      print('Initializing replica set...');
                      rs.initiate({
                        _id: 'rs0',
                        members: [{_id: 0, host: 'mongodb-0.mongodb.mongodb.svc.cluster.local:27017'}]
                      });
                      print('Replica set initialized');
                      
                      // Wait for primary
                      while (rs.status().myState !== 1) {
                        print('Waiting for primary...');
                        sleep(1000);
                      }
                      
                      // Create application user
                      use admin
                      db.createUser({
                        user: 'narrative_user',
                        pwd: '0qJXBckS6huZWJtTgBEEHd0dc/uE9RBkbH7sRx11vpg=',
                        roles: [
                          {role: 'readWrite', db: 'narrative_world_system'},
                          {role: 'dbAdmin', db: 'narrative_world_system'}
                        ]
                      });
                      print('Application user created');
                    }
                  }
                " || true
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-keyfile
          mountPath: /etc/mongodb-keyfile
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "rs.status().ok"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data-pvc
      - name: mongodb-keyfile
        secret:
          secretName: mongodb-secrets
          items:
          - key: mongodb-replica-set-key
            path: mongodb-replica-set-key
            mode: 0400
---
# MongoDB Headless Service (for StatefulSet)
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: mongodb
  labels:
    app: mongodb
spec:
  clusterIP: None
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb
---
# MongoDB External Service (NodePort)
apiVersion: v1
kind: Service
metadata:
  name: mongodb-external
  namespace: mongodb
  labels:
    app: mongodb
spec:
  type: NodePort
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    nodePort: 30017
    name: mongodb
---
# MongoDB Client Service (ClusterIP for applications)
apiVersion: v1
kind: Service
metadata:
  name: mongodb-client
  namespace: mongodb
  labels:
    app: mongodb
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb