---
# SSL Certificate for development environment
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: playablestories-dev-tls
  namespace: development
spec:
  secretName: playablestories-dev-tls
  dnsNames:
  - dev.playablestories.ai
  - dev-api.playablestories.ai
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
# HTTPS-only Ingress for development environment
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: playablestories-dev-ingress
  namespace: development
  annotations:
    # Allow HTTP for ACME challenge, then force SSL redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Basic auth disabled for development testing
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: basic-auth-dev
    # nginx.ingress.kubernetes.io/auth-realm: "Development Environment - Authentication Required"
    
    # Allow ACME challenge without auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      location /.well-known/acme-challenge/ {
        auth_basic off;
        allow all;
      }
    
    # CORS settings
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Certificate issuer
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - dev.playablestories.ai
    - dev-api.playablestories.ai
    secretName: playablestories-dev-tls
  rules:
  # Frontend/Web application
  - host: dev.playablestories.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: playablestories-web
            port:
              number: 80
  # API backend
  - host: dev-api.playablestories.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: playablestories-api
            port:
              number: 8080
# Note: Basic auth secret already exists in namespace.yaml
---
# Development web service placeholder
apiVersion: v1
kind: Service
metadata:
  name: playablestories-web
  namespace: development
spec:
  selector:
    app: playablestories-web
  ports:
  - name: http
    port: 80
    targetPort: 80
---
# Development API service placeholder
apiVersion: v1
kind: Service
metadata:
  name: playablestories-api
  namespace: development
spec:
  selector:
    app: playablestories-api
  ports:
  - name: http
    port: 8080
    targetPort: 8080
---
# Example development web deployment (placeholder)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: playablestories-web
  namespace: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: playablestories-web
  template:
    metadata:
      labels:
        app: playablestories-web
    spec:
      containers:
      - name: web
        image: nginx:alpine
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        volumeMounts:
        - name: web-content
          mountPath: /usr/share/nginx/html
      volumes:
      - name: web-content
        configMap:
          name: dev-web-content
---
# Example development API deployment (placeholder)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: playablestories-api
  namespace: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: playablestories-api
  template:
    metadata:
      labels:
        app: playablestories-api
    spec:
      containers:
      - name: api
        image: nginx:alpine
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        # Simple API placeholder
        command:
        - /bin/sh
        - -c
        - |
          echo '{"status":"online","environment":"development","ssl":true,"auth":"disabled","api_version":"v1","domain":"dev-api.playablestories.ai"}' > /usr/share/nginx/html/index.html &&
          sed -i 's/listen       80;/listen       8080;/' /etc/nginx/conf.d/default.conf &&
          sed -i 's/index.html index.htm;/index.html index.htm; add_header Content-Type application\/json;/' /etc/nginx/conf.d/default.conf &&
          nginx -g 'daemon off;'